// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lokahi.proto

/*
Package lokahi is a generated protocol buffer package.

lokahi is a HTTP health checking and response time monitoring service.

It is generated from these files:
	lokahi.proto

It has these top-level messages:
	CreateOpts
	CheckID
	Check
	CheckStatus
	ListOpts
	ChecksPage
	HistogramData
*/
package lokahi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// State is the finite state machine state.
type Check_State int32

const (
	Check_INIT  Check_State = 0
	Check_UP    Check_State = 1
	Check_DOWN  Check_State = 2
	Check_ERROR Check_State = 3
)

var Check_State_name = map[int32]string{
	0: "INIT",
	1: "UP",
	2: "DOWN",
	3: "ERROR",
}
var Check_State_value = map[string]int32{
	"INIT":  0,
	"UP":    1,
	"DOWN":  2,
	"ERROR": 3,
}

func (x Check_State) String() string {
	return proto.EnumName(Check_State_name, int32(x))
}
func (Check_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

// CreateOpts contains arguments used to construct a Check.
type CreateOpts struct {
	// url is the HTTP/S url that will be monitored.
	Url string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	// webhook_url is the HTTP/S url that will be HTTPS POST-ed to with the body
	// containing a protobuf-encoded CheckStatus message.
	WebhookUrl string `protobuf:"bytes,2,opt,name=webhook_url,json=webhookUrl" json:"webhook_url,omitempty"`
	// health checks happen every number of seconds (minimum: 60, maximum: 600).
	Every int32 `protobuf:"varint,3,opt,name=every" json:"every,omitempty"`
	// playbook_url is the playbook URL that will be passed to status webhooks.
	PlaybookUrl string `protobuf:"bytes,4,opt,name=playbook_url,json=playbookUrl" json:"playbook_url,omitempty"`
}

func (m *CreateOpts) Reset()                    { *m = CreateOpts{} }
func (m *CreateOpts) String() string            { return proto.CompactTextString(m) }
func (*CreateOpts) ProtoMessage()               {}
func (*CreateOpts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateOpts) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *CreateOpts) GetWebhookUrl() string {
	if m != nil {
		return m.WebhookUrl
	}
	return ""
}

func (m *CreateOpts) GetEvery() int32 {
	if m != nil {
		return m.Every
	}
	return 0
}

func (m *CreateOpts) GetPlaybookUrl() string {
	if m != nil {
		return m.PlaybookUrl
	}
	return ""
}

// CheckID is a small wrapper around a Check ID.
type CheckID struct {
	// id is the Check id.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *CheckID) Reset()                    { *m = CheckID{} }
func (m *CheckID) String() string            { return proto.CompactTextString(m) }
func (*CheckID) ProtoMessage()               {}
func (*CheckID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CheckID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Check is an individual HTTP check.
type Check struct {
	// id is the unique id of this check.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// url is the HTTP/S url that will be monitored.
	Url string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	// webhook_url is the HTTP/S url that will be HTTPS POST-ed to with the body
	// containing a protobuf-encoded CheckStatus message.
	WebhookUrl string `protobuf:"bytes,3,opt,name=webhook_url,json=webhookUrl" json:"webhook_url,omitempty"`
	// webhook_response_time_nanoseconds is last the response time of the webhook.
	WebhookResponseTimeNanoseconds int64 `protobuf:"varint,4,opt,name=webhook_response_time_nanoseconds,json=webhookResponseTimeNanoseconds" json:"webhook_response_time_nanoseconds,omitempty"`
	// health checks happen every number of seconds (minimum: 60, maximum: 600).
	Every int32 `protobuf:"varint,5,opt,name=every" json:"every,omitempty"`
	// playbook_url is the playbook URL that will be passed to status webhooks.
	PlaybookUrl string `protobuf:"bytes,6,opt,name=playbook_url,json=playbookUrl" json:"playbook_url,omitempty"`
	// state is the current state of this uptime check.
	State Check_State `protobuf:"varint,7,opt,name=state,enum=github.xe.lokahi.Check_State" json:"state,omitempty"`
}

func (m *Check) Reset()                    { *m = Check{} }
func (m *Check) String() string            { return proto.CompactTextString(m) }
func (*Check) ProtoMessage()               {}
func (*Check) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Check) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Check) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Check) GetWebhookUrl() string {
	if m != nil {
		return m.WebhookUrl
	}
	return ""
}

func (m *Check) GetWebhookResponseTimeNanoseconds() int64 {
	if m != nil {
		return m.WebhookResponseTimeNanoseconds
	}
	return 0
}

func (m *Check) GetEvery() int32 {
	if m != nil {
		return m.Every
	}
	return 0
}

func (m *Check) GetPlaybookUrl() string {
	if m != nil {
		return m.PlaybookUrl
	}
	return ""
}

func (m *Check) GetState() Check_State {
	if m != nil {
		return m.State
	}
	return Check_INIT
}

// CheckStatus contains detailed information about the uptime status of a Check.
// This is POST-ed to webhook recipients.
type CheckStatus struct {
	// check is the information for the relevant Check.
	Check *Check `protobuf:"bytes,1,opt,name=check" json:"check,omitempty"`
	// last_response_time_nanoseconds is the last http web response time from the
	// Check's monitoring URL in nanoseconds.
	LastResponseTimeNanoseconds int64 `protobuf:"varint,2,opt,name=last_response_time_nanoseconds,json=lastResponseTimeNanoseconds" json:"last_response_time_nanoseconds,omitempty"`
	// histogram_data is the detailed histogram data for this check.
	HistogramData *HistogramData `protobuf:"bytes,3,opt,name=histogram_data,json=histogramData" json:"histogram_data,omitempty"`
}

func (m *CheckStatus) Reset()                    { *m = CheckStatus{} }
func (m *CheckStatus) String() string            { return proto.CompactTextString(m) }
func (*CheckStatus) ProtoMessage()               {}
func (*CheckStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CheckStatus) GetCheck() *Check {
	if m != nil {
		return m.Check
	}
	return nil
}

func (m *CheckStatus) GetLastResponseTimeNanoseconds() int64 {
	if m != nil {
		return m.LastResponseTimeNanoseconds
	}
	return 0
}

func (m *CheckStatus) GetHistogramData() *HistogramData {
	if m != nil {
		return m.HistogramData
	}
	return nil
}

// ListOpts contains options to the service Checks method List.
type ListOpts struct {
	// count is the number of checks that will be returned.
	Count int32 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	// page is the page of results to fetch.
	Page int32 `protobuf:"varint,2,opt,name=page" json:"page,omitempty"`
	// include_status includes the histogram data for each check result.
	// This is O(scary). Use this with care.
	IncludeStatus bool `protobuf:"varint,3,opt,name=include_status,json=includeStatus" json:"include_status,omitempty"`
}

func (m *ListOpts) Reset()                    { *m = ListOpts{} }
func (m *ListOpts) String() string            { return proto.CompactTextString(m) }
func (*ListOpts) ProtoMessage()               {}
func (*ListOpts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ListOpts) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ListOpts) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListOpts) GetIncludeStatus() bool {
	if m != nil {
		return m.IncludeStatus
	}
	return false
}

// ChecksPage is a paginated Check list response.
type ChecksPage struct {
	Results []*ChecksPage_Result `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *ChecksPage) Reset()                    { *m = ChecksPage{} }
func (m *ChecksPage) String() string            { return proto.CompactTextString(m) }
func (*ChecksPage) ProtoMessage()               {}
func (*ChecksPage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ChecksPage) GetResults() []*ChecksPage_Result {
	if m != nil {
		return m.Results
	}
	return nil
}

// Result is an individual List result.
type ChecksPage_Result struct {
	// check is the individual check being listed.
	Check *Check `protobuf:"bytes,1,opt,name=check" json:"check,omitempty"`
	// histogram_data is the detailed histogram data for this check, this is
	// nornally not set unless include_status is set in ListOpts.
	HistogramData *HistogramData `protobuf:"bytes,2,opt,name=histogram_data,json=histogramData" json:"histogram_data,omitempty"`
}

func (m *ChecksPage_Result) Reset()                    { *m = ChecksPage_Result{} }
func (m *ChecksPage_Result) String() string            { return proto.CompactTextString(m) }
func (*ChecksPage_Result) ProtoMessage()               {}
func (*ChecksPage_Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

func (m *ChecksPage_Result) GetCheck() *Check {
	if m != nil {
		return m.Check
	}
	return nil
}

func (m *ChecksPage_Result) GetHistogramData() *HistogramData {
	if m != nil {
		return m.HistogramData
	}
	return nil
}

// HistogramData contains information from the HDR histogram maintained for
// each check.
type HistogramData struct {
	// max_nanoseconds is the maximum http web response time in nanoseconds.
	MaxNanoseconds float64 `protobuf:"fixed64,1,opt,name=max_nanoseconds,json=maxNanoseconds" json:"max_nanoseconds,omitempty"`
	// min_nanoseconds is the minimum http web response time in nanoseconds.
	MinNanoseconds float64 `protobuf:"fixed64,2,opt,name=min_nanoseconds,json=minNanoseconds" json:"min_nanoseconds,omitempty"`
	// mean_nanoseconds is the mean http web response time in nanoseconds.
	MeanNanoseconds float64 `protobuf:"fixed64,3,opt,name=mean_nanoseconds,json=meanNanoseconds" json:"mean_nanoseconds,omitempty"`
	// stddev is the standard deviation from the mean.
	Stddev float64 `protobuf:"fixed64,4,opt,name=stddev" json:"stddev,omitempty"`
	// p50_nanoseconds is the 50th percentile of the http web response times in
	// nanoseconds.
	P50Nanoseconds float64 `protobuf:"fixed64,5,opt,name=p50_nanoseconds,json=p50Nanoseconds" json:"p50_nanoseconds,omitempty"`
	// p75_nanoseconds is the 75th percentile of the http web response times in
	// nanoseconds.
	P75Nanoseconds float64 `protobuf:"fixed64,6,opt,name=p75_nanoseconds,json=p75Nanoseconds" json:"p75_nanoseconds,omitempty"`
	// p95_nanoseconds is the 95th percentile of the http web response times in
	// nanoseconds.
	P95Nanoseconds float64 `protobuf:"fixed64,7,opt,name=p95_nanoseconds,json=p95Nanoseconds" json:"p95_nanoseconds,omitempty"`
	// p99_nanoseconds is the 95th percentile of the http web response times in
	// nanoseconds.
	P99Nanoseconds float64 `protobuf:"fixed64,8,opt,name=p99_nanoseconds,json=p99Nanoseconds" json:"p99_nanoseconds,omitempty"`
}

func (m *HistogramData) Reset()                    { *m = HistogramData{} }
func (m *HistogramData) String() string            { return proto.CompactTextString(m) }
func (*HistogramData) ProtoMessage()               {}
func (*HistogramData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *HistogramData) GetMaxNanoseconds() float64 {
	if m != nil {
		return m.MaxNanoseconds
	}
	return 0
}

func (m *HistogramData) GetMinNanoseconds() float64 {
	if m != nil {
		return m.MinNanoseconds
	}
	return 0
}

func (m *HistogramData) GetMeanNanoseconds() float64 {
	if m != nil {
		return m.MeanNanoseconds
	}
	return 0
}

func (m *HistogramData) GetStddev() float64 {
	if m != nil {
		return m.Stddev
	}
	return 0
}

func (m *HistogramData) GetP50Nanoseconds() float64 {
	if m != nil {
		return m.P50Nanoseconds
	}
	return 0
}

func (m *HistogramData) GetP75Nanoseconds() float64 {
	if m != nil {
		return m.P75Nanoseconds
	}
	return 0
}

func (m *HistogramData) GetP95Nanoseconds() float64 {
	if m != nil {
		return m.P95Nanoseconds
	}
	return 0
}

func (m *HistogramData) GetP99Nanoseconds() float64 {
	if m != nil {
		return m.P99Nanoseconds
	}
	return 0
}

func init() {
	proto.RegisterType((*CreateOpts)(nil), "github.xe.lokahi.CreateOpts")
	proto.RegisterType((*CheckID)(nil), "github.xe.lokahi.CheckID")
	proto.RegisterType((*Check)(nil), "github.xe.lokahi.Check")
	proto.RegisterType((*CheckStatus)(nil), "github.xe.lokahi.CheckStatus")
	proto.RegisterType((*ListOpts)(nil), "github.xe.lokahi.ListOpts")
	proto.RegisterType((*ChecksPage)(nil), "github.xe.lokahi.ChecksPage")
	proto.RegisterType((*ChecksPage_Result)(nil), "github.xe.lokahi.ChecksPage.Result")
	proto.RegisterType((*HistogramData)(nil), "github.xe.lokahi.HistogramData")
	proto.RegisterEnum("github.xe.lokahi.Check_State", Check_State_name, Check_State_value)
}

func init() { proto.RegisterFile("lokahi.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 677 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0xdd, 0x6a, 0xdb, 0x4a,
	0x10, 0xc7, 0x8f, 0x24, 0x4b, 0x76, 0xc6, 0x89, 0x23, 0x96, 0x70, 0x8e, 0xe3, 0x93, 0x26, 0x8e,
	0x4a, 0xa9, 0x7b, 0x51, 0x11, 0x1c, 0x4c, 0x30, 0xb4, 0xb4, 0x24, 0xee, 0x87, 0xa1, 0x24, 0x61,
	0x9b, 0x50, 0x68, 0x2f, 0xcc, 0xda, 0x5a, 0x62, 0x11, 0x59, 0x12, 0xda, 0x55, 0xea, 0x5c, 0x95,
	0x3e, 0x53, 0x5f, 0xa2, 0x85, 0x3e, 0x54, 0xd9, 0x95, 0xd4, 0x58, 0x56, 0x65, 0x68, 0xee, 0x34,
	0xb3, 0xbf, 0xd1, 0xcc, 0xfc, 0x47, 0x3b, 0x82, 0x75, 0x2f, 0xb8, 0x26, 0x53, 0xd7, 0x0e, 0xa3,
	0x80, 0x07, 0xc8, 0xbc, 0x72, 0xf9, 0x34, 0x1e, 0xdb, 0x73, 0x6a, 0x27, 0x7e, 0x6b, 0x0e, 0x70,
	0x12, 0x51, 0xc2, 0xe9, 0x59, 0xc8, 0x19, 0x32, 0x41, 0x8b, 0x23, 0xaf, 0xa9, 0xb4, 0x95, 0xce,
	0x1a, 0x16, 0x8f, 0x68, 0x0f, 0xea, 0x9f, 0xe9, 0x78, 0x1a, 0x04, 0xd7, 0x23, 0x71, 0xa2, 0xca,
	0x13, 0x48, 0x5d, 0x97, 0x91, 0x87, 0xb6, 0x40, 0xa7, 0x37, 0x34, 0xba, 0x6d, 0x6a, 0x6d, 0xa5,
	0xa3, 0xe3, 0xc4, 0x40, 0xfb, 0xb0, 0x1e, 0x7a, 0xe4, 0x76, 0x9c, 0xc5, 0x55, 0x64, 0x5c, 0x3d,
	0xf3, 0x5d, 0x46, 0x9e, 0xb5, 0x0d, 0xd5, 0x93, 0x29, 0x9d, 0x5c, 0x0f, 0x07, 0xa8, 0x01, 0xaa,
	0xeb, 0xa4, 0x59, 0x55, 0xd7, 0xb1, 0xbe, 0xa9, 0xa0, 0xcb, 0xb3, 0xe5, 0x93, 0xac, 0x40, 0xb5,
	0xb4, 0x40, 0xad, 0x50, 0xe0, 0x10, 0xf6, 0x33, 0x20, 0xa2, 0x2c, 0x0c, 0x7c, 0x46, 0x47, 0xdc,
	0x9d, 0xd1, 0x91, 0x4f, 0xfc, 0x80, 0xd1, 0x49, 0xe0, 0x3b, 0x4c, 0xd6, 0xa7, 0xe1, 0xdd, 0x14,
	0xc4, 0x29, 0x77, 0xe1, 0xce, 0xe8, 0xe9, 0x1d, 0x75, 0xd7, 0xab, 0xbe, 0xaa, 0x57, 0xa3, 0xd0,
	0x2b, 0x3a, 0x04, 0x9d, 0x71, 0xc2, 0x69, 0xb3, 0xda, 0x56, 0x3a, 0x8d, 0xee, 0x03, 0x7b, 0x79,
	0x0e, 0xb6, 0x6c, 0xd7, 0x7e, 0x2f, 0x20, 0x9c, 0xb0, 0x96, 0x0d, 0xba, 0xb4, 0x51, 0x0d, 0x2a,
	0xc3, 0xd3, 0xe1, 0x85, 0xf9, 0x0f, 0x32, 0x40, 0xbd, 0x3c, 0x37, 0x15, 0xe1, 0x19, 0x9c, 0x7d,
	0x38, 0x35, 0x55, 0xb4, 0x06, 0xfa, 0x2b, 0x8c, 0xcf, 0xb0, 0xa9, 0x59, 0x3f, 0x14, 0xa8, 0xcb,
	0xd7, 0x88, 0xa8, 0x98, 0xa1, 0xa7, 0xa0, 0x4f, 0x84, 0x29, 0xe5, 0xab, 0x77, 0xff, 0x2b, 0x49,
	0x8a, 0x13, 0x0a, 0x9d, 0xc0, 0xae, 0x47, 0x18, 0x5f, 0x21, 0x92, 0x2a, 0x45, 0xfa, 0x5f, 0x50,
	0x65, 0x0a, 0xbd, 0x86, 0xc6, 0xd4, 0x65, 0x3c, 0xb8, 0x8a, 0xc8, 0x6c, 0xe4, 0x10, 0x4e, 0xe4,
	0x40, 0xea, 0xdd, 0xbd, 0x62, 0xf2, 0xb7, 0x19, 0x37, 0x20, 0x9c, 0xe0, 0x8d, 0xe9, 0xa2, 0x69,
	0x7d, 0x82, 0xda, 0x3b, 0x97, 0x71, 0xf9, 0x51, 0x6e, 0x81, 0x3e, 0x09, 0x62, 0x9f, 0xcb, 0x3e,
	0x74, 0x9c, 0x18, 0x08, 0x41, 0x25, 0x24, 0x57, 0x54, 0x16, 0xa5, 0x63, 0xf9, 0x8c, 0x1e, 0x41,
	0xc3, 0xf5, 0x27, 0x5e, 0xec, 0xd0, 0x11, 0x93, 0x1a, 0xc8, 0xec, 0x35, 0xbc, 0x91, 0x7a, 0x13,
	0x61, 0xac, 0x9f, 0x0a, 0x80, 0x6c, 0x9d, 0x9d, 0x8b, 0xa8, 0xe7, 0x50, 0x8d, 0x28, 0x8b, 0x3d,
	0xce, 0x9a, 0x4a, 0x5b, 0xeb, 0xd4, 0xbb, 0x0f, 0x4b, 0x94, 0x92, 0xb8, 0x8d, 0x25, 0x8b, 0xb3,
	0x98, 0xd6, 0x17, 0x30, 0x12, 0xd7, 0xdf, 0x0a, 0x5e, 0xd4, 0x4a, 0xbd, 0x97, 0x56, 0xdf, 0x55,
	0xd8, 0xc8, 0x01, 0xe8, 0x31, 0x6c, 0xce, 0xc8, 0x3c, 0x37, 0x3b, 0x51, 0x92, 0x82, 0x1b, 0x33,
	0x32, 0x5f, 0x1c, 0x97, 0x00, 0x5d, 0xbf, 0x30, 0x64, 0x01, 0xba, 0xfe, 0x22, 0xf8, 0x04, 0xcc,
	0x19, 0x25, 0x79, 0x52, 0x93, 0xe4, 0xa6, 0xf0, 0x2f, 0xa2, 0xff, 0x82, 0xc1, 0xb8, 0xe3, 0xd0,
	0x1b, 0x79, 0xa9, 0x14, 0x9c, 0x5a, 0x22, 0x57, 0xd8, 0x3b, 0xc8, 0xbd, 0x41, 0x4f, 0x72, 0x85,
	0xbd, 0x83, 0xa5, 0xa2, 0xc2, 0xa3, 0x5e, 0x0e, 0x34, 0x52, 0xf0, 0xa8, 0xb7, 0x0c, 0xf6, 0xf3,
	0x60, 0x35, 0x05, 0xfb, 0x45, 0xb0, 0x9f, 0x03, 0x6b, 0x19, 0xd8, 0x5f, 0x00, 0xbb, 0x5f, 0x35,
	0x30, 0x92, 0x51, 0xa3, 0x17, 0x60, 0x24, 0x8b, 0x11, 0xed, 0xfc, 0x61, 0x8e, 0xbf, 0x57, 0x66,
	0xab, 0x6c, 0xca, 0xe8, 0x19, 0x18, 0x03, 0xea, 0x51, 0x4e, 0xd1, 0x76, 0x09, 0x32, 0x1c, 0x94,
	0x47, 0xf7, 0x41, 0x7b, 0x43, 0xf9, 0xbd, 0x42, 0x5f, 0x42, 0x45, 0xdc, 0x1d, 0xd4, 0x2a, 0x02,
	0xd9, 0x9d, 0x6a, 0xed, 0xac, 0xfa, 0xc4, 0xd1, 0x11, 0x68, 0xe7, 0x31, 0x47, 0x65, 0x19, 0xca,
	0x53, 0x1f, 0x83, 0x91, 0x2e, 0x9f, 0x15, 0x85, 0x97, 0x6d, 0xbf, 0x24, 0xf2, 0xb8, 0xf6, 0xd1,
	0x48, 0xbc, 0x63, 0x43, 0xfe, 0xb4, 0x0e, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x71, 0x07,
	0x62, 0xc4, 0x06, 0x00, 0x00,
}
